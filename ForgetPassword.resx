<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbxDelete.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>